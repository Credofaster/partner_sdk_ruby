# credofaster_partner_api
#
# This file was automatically generated by
# APIMATIC v2.0 ( https://apimatic.io ).

module CredofasterPartnerApi
  # EventsController
  class EventsController < BaseController
    @instance = EventsController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # A callback to receive the below Callbacks
    # @param [RegisterCallbackRequest] request Required parameter: Example:
    # @return RegisterCallbackResponse response from the API call
    def register_callback(request)
      # Prepare query url.
      _path_url = '/RegisterCallback'
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::DEFAULT
      )
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: request.to_json
      )
      CustomHeaderAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      RegisterCallbackResponse.from_hash(decoded)
    end

    # You are required to provide a HTTP/HTTPS endpoint, to which we will
    # publish various events.
    # This Endpoint will be hosted on the CLIENT's Environment. If no endpoint
    # is provided, we are not liable to any missing events.
    # NOTE: A DETAILED PDF of all Events is shared on request. It contains
    # application events, System Health Events and Alerts on the same.
    # @param [EventCallbackPayload] payload_to_receive Required parameter:
    # Sample Payload:
    # {"EventId":"123456789","EventType":"QUEUED","RequestId":"A09797a11e2564061
    # b859781b18bb34dd","EventData":{}}
    # @return EventCallbackFeedback response from the API call
    def client_event_feedback(payload_to_receive)
      # Prepare query url.
      _path_url = '/my_endpoint_here'
      _query_builder = Configuration.get_base_uri(
        Configuration::Server::MY_CALLBACK_ENDPOINT
      )
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: payload_to_receive.to_json
      )
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      EventCallbackFeedback.from_hash(decoded)
    end
  end
end
